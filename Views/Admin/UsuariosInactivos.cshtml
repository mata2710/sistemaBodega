@model SistemaBodega.Models.PagedResult<SistemaBodega.Models.Usuario>
@using Microsoft.AspNetCore.Http
@using System
@using System.Linq

@{
    ViewData["Title"] = "Usuarios Inactivos";

    // Búsqueda
    string q = Context?.Request?.Query["q"].ToString() ?? string.Empty;

    // Normalizador de roles a las 2 únicas opciones permitidas
    Func<string, string?> NormalizeRole = (r) =>
    {
        var s = (r ?? "").Trim().ToLowerInvariant();
        if (s == "admin" || s == "administrador" || s == "administrator") return "Administrador";
        if (s == "empleado" || s == "employee") return "Empleado";
        return null;
    };

    // Roles seleccionados desde query -> normalizados
    string[] selectedRoles = Array.Empty<string>();
    if (Context?.Request?.Query.TryGetValue("roles", out var roleVals) == true)
    {
        selectedRoles = roleVals
            .Select(NormalizeRole)
            .Where(x => x != null)
            .Cast<string>()
            .Distinct(StringComparer.OrdinalIgnoreCase)
            .ToArray();
    }

    var roles = new[] { "Administrador", "Empleado" };

    int totalPages = Math.Max(1, (int)Math.Ceiling((decimal)(Model?.TotalItems ?? 0) / (Model?.PageSize ?? 10)));
    int startRow = (Model?.TotalItems ?? 0) == 0 ? 0 : ((Model!.Page - 1) * Model.PageSize) + 1;
    int endRow = Math.Min(Model!.Page * Model!.PageSize, Model.TotalItems);
}

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" />

<div class="page-tools mt-3 mb-3">
    <div>
        <h1 class="m-0">Usuarios (Inactivos)</h1>
        <div class="text-muted">Total: @Model.TotalItems</div>
    </div>

    <!-- Botones a la derecha (orden + colores desde site.css) -->
    <div class="ms-auto d-flex align-items-center gap-2">
        <a asp-controller="Admin" asp-action="CrearUsuario" class="btn">
            <i class="bi bi-plus-lg me-1"></i> Crear Usuario
        </a>
        <a asp-controller="Admin" asp-action="Usuarios" class="btn">
            <i class="bi bi-arrow-left me-1"></i> Volver a Activos
        </a>
    </div>
</div>

@if (TempData["Mensaje"] is string msg && !string.IsNullOrWhiteSpace(msg))
{
    <div class="alert alert-info alert-dismissible fade show" role="alert">
        @msg
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<!-- Filtros (buscador + roles) -->
<form method="get" class="card shadow-sm mb-3" style="border:1px solid rgba(0,0,0,.06); border-radius:.75rem;">
    <div class="card-body">
        <div class="row g-2 align-items-end">
            <div class="col-md-6">
                <label class="form-label">Nombre</label>
                <div class="search-group">
                    <input type="search"
                           name="q"
                           value="@q"
                           class="form-control pe-5"
                           placeholder="Buscar por nombre o correo..." />
                    <button type="submit" class="btn-search" aria-label="Buscar">
                        <i class="bi bi-search"></i>
                    </button>
                </div>
            </div>

            <div class="col-md-6">
                <label class="form-label">Rol</label>
                <div class="d-flex flex-wrap gap-2 small">
                    @foreach (var r in roles)
                    {
                        bool isChecked = selectedRoles.Contains(r, StringComparer.OrdinalIgnoreCase);
                        <label class="form-check d-flex align-items-center gap-2 m-0">
                            <input class="form-check-input"
                                   type="checkbox"
                                   name="roles"
                                   value="@r"
                                   @(isChecked ? "checked" : "")
                                   onchange="this.form.submit()" />
                            <span class="form-check-label">@r</span>
                        </label>
                    }
                </div>
            </div>
        </div>

        <!-- Reset a página 1 conservando pageSize -->
        <input type="hidden" name="page" value="1" />
        <input type="hidden" name="pageSize" value="@Model.PageSize" />
    </div>
</form>

<div class="table-wrap">
    <table class="table-pro">
        <thead>
            <tr>
                <!-- Reducimos ligeramente estas columnas -->
                <th style="width:26%">Nombre</th>
                <th style="width:24%">Correo</th>
                <th style="width:10%">Rol</th>
                <th style="width:18%">Desactivado</th>
                <!-- Damos más espacio a Acciones -->
                <th class="td-center" style="width:140px">Acciones</th>
            </tr>
        </thead>
        <tbody>
            @if (Model?.Items != null && Model.Items.Any())
            {
                foreach (var u in Model.Items)
                {
                    <tr>
                        <td class="td-truncate" title="@u.NombreCompleto">
                            <a asp-controller="Admin" asp-action="EditarUsuario" asp-route-id="@u.Id" class="link-accent">
                                @u.NombreCompleto
                            </a>
                        </td>
                        <td class="td-truncate" title="@u.Correo">
                            <a href="mailto:@u.Correo" class="link-accent">@u.Correo</a>
                        </td>
                        <td class="text-nowrap">@u.Rol</td>
                        <td class="text-nowrap">
                            @(u.DeactivatedAt?.ToLocalTime().ToString("g") ?? "-")
                        </td>
                        <td class="td-center" style="white-space:nowrap;">
                            <!-- ✏️ Editar -->
                            <a asp-controller="Admin"
                               asp-action="EditarUsuario"
                               asp-route-id="@u.Id"
                               class="btn-icon edit"
                               title="Editar"
                               aria-label="Editar">
                                <i class="bi bi-pencil-square"></i>
                            </a>

                            <!-- ♻️ Reactivar -->
                            <form asp-controller="Admin"
                                  asp-action="ActivarUsuario"
                                  asp-route-id="@u.Id"
                                  method="post"
                                  class="d-inline">
                                @Html.AntiForgeryToken()
                                <button type="submit"
                                        class="btn-icon activate"
                                        title="Reactivar"
                                        aria-label="Reactivar">
                                    <i class="bi bi-arrow-counterclockwise"></i>
                                </button>
                            </form>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr><td colspan="5" class="text-center text-muted py-4">No se encontraron usuarios inactivos.</td></tr>
            }
        </tbody>
    </table>
</div>

@{
    // Helper para construir enlaces preservando filtros (normalizados)
    Func<int, string> pageUrl = (p) =>
        Url.Action("UsuariosInactivos", "Admin", new
        {
            page = p,
            pageSize = Model.PageSize,
            q = q,
            roles = selectedRoles
        })!;
}

<!-- Barra inferior con paginación -->
<nav aria-label="Paginación" class="pager-bar mt-2">
    <div class="small text-muted pager-left">
        Mostrando @startRow - @endRow de @Model.TotalItems
    </div>

    <form method="get" class="d-flex align-items-center gap-2 pager-center">
        <label class="small text-muted mb-0" for="pageSizeSelect">Pág.</label>
        <select id="pageSizeSelect" name="pageSize" class="form-select form-select-sm" onchange="this.form.submit()">
            @{
                var sizes = new[] { 5, 10, 25, 50, 100 };
            }
            @foreach (var s in sizes)
            {
                if (Model.PageSize == s)
                {
                    <option value="@s" selected="selected">@s</option>
                }
                else
                {
                    <option value="@s">@s</option>
                }
            }
        </select>

        <!-- Preservar búsqueda y roles y reset a página 1 -->
        <input type="hidden" name="q" value="@q" />
        <input type="hidden" name="page" value="1" />
        @foreach (var r in selectedRoles)
        {
            <input type="hidden" name="roles" value="@r" />
        }
    </form>

    <ul class="pagination mb-0 pager-right">
        <li class="page-item @(Model.Page <= 1 ? "disabled" : "")">
            <a class="page-link" href="@(pageUrl(Model.Page - 1))">Anterior</a>
        </li>

        @for (int p = 1; p <= totalPages; p++)
        {
            <li class="page-item @(p == Model.Page ? "active" : "")">
                <a class="page-link" href="@(pageUrl(p))">@p</a>
            </li>
        }

        <li class="page-item @(Model.Page >= totalPages ? "disabled" : "")">
            <a class="page-link" href="@(pageUrl(Model.Page + 1))">Siguiente</a>
        </li>
    </ul>
</nav>

