@model SistemaBodega.Models.Bodega
@using Microsoft.AspNetCore.Http

@{
    ViewData["Title"] = "Editar bodega";
    var rol = Context.Session.GetString("Rol");
}

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" />

<style>
    /* ===== Cards / layout ===== */
    .card.shadow-sm {
        border: 1px solid rgba(0,0,0,.06);
        border-radius: .75rem;
    }

    .section-title {
        font-size: 1rem;
        font-weight: 600;
        margin-bottom: .75rem;
        padding-left: .65rem;
        border-left: 4px solid #00809D;
    }

    /* ===== Botones (mismo patrón que Clientes) ===== */
    .btn-save {
        background: #437057 !important;
        color: #fff !important;
        border: 0 !important;
    }

        .btn-save:hover {
            filter: brightness(.95);
            color: #fff !important;
            background: #3a614c !important;
        }

        .btn-save:focus {
            box-shadow: 0 0 0 .2rem rgba(67,112,87,.25) !important;
        }

    .btn-cancel {
        background: #DC3C22 !important;
        color: #fff !important;
        border: 0 !important;
    }

        .btn-cancel:hover {
            background: #C3341E !important;
            color: #fff !important;
        }

        .btn-cancel:focus {
            box-shadow: 0 0 0 .2rem rgba(220,60,34,.25) !important;
        }

    /* ===== Preview badges ===== */
    .badge-state {
        display: inline-block;
        padding: .25rem .6rem;
        border-radius: 999px;
        font-weight: 600;
        font-size: .85rem;
        border: 1px solid transparent;
        white-space: nowrap;
    }

    .state-available {
        background: #E7F6EC;
        color: #1F7A39;
        border-color: #BDE4C7;
    }

    .state-occupied {
        background: #fdecea;
        color: #b42318;
        border-color: #f5c2c7;
    }

    .state-reserved {
        background: #fff4cc;
        color: #664d03;
        border-color: #ffec99;
    }

    /* ===== Rejilla vista rápida ===== */
    .dl-grid {
        display: grid;
        grid-template-columns: 150px 1fr;
        row-gap: .35rem;
        column-gap: 1rem;
    }

        .dl-grid dt {
            color: #6c757d;
            font-weight: 600;
            display: flex;
            align-items: center;
        }

        .dl-grid dd {
            margin: 0;
        }

    /* Razor: usar @@ para media */
    @@media (max-width: 768px) {
        .dl-grid {
            grid-template-columns: 1fr;
        }
    }

    /* Utilidades */
    .text-mono {
        font-variant-numeric: tabular-nums;
    }
</style>

<div class="d-flex justify-content-between align-items-center mt-3 mb-3 page-tools">
    <h2 class="mb-0">Editar bodega</h2>
    <a asp-action="Index" class="btn btn-sm btn-outline-secondary">
        <i class="bi bi-arrow-left-short me-1"></i> Volver al listado
    </a>
</div>

<div class="row g-3">
    <!-- Columna izquierda: formulario -->
    <div class="col-lg-7">
        <div class="card shadow-sm">
            <div class="card-body p-4">
                <form asp-action="Edit" method="post" novalidate>
                    @Html.AntiForgeryToken()

                    <div asp-validation-summary="ModelOnly"
                         class="alert alert-danger rounded-3 mb-3"
                         role="alert"
                         style="display:@(ViewData.ModelState.IsValid ? "none" : "block")">
                        Revisá los campos marcados en rojo.
                    </div>

                    <input type="hidden" asp-for="Id" />

                    <!-- Identificación -->
                    <div class="mb-3">
                        <label asp-for="Nombre" class="form-label fw-semibold">Nombre</label>
                        <input asp-for="Nombre" class="form-control form-control-lg" placeholder="Ej.: Bodega A-12" />
                        <span asp-validation-for="Nombre" class="text-danger small"></span>
                    </div>

                    <div class="row g-3">
                        <div class="col-md-6">
                            <label asp-for="Complejo" class="form-label fw-semibold">Complejo</label>
                            <input asp-for="Complejo" class="form-control form-control-lg" placeholder="Parque Industrial XYZ" />
                            <span asp-validation-for="Complejo" class="text-danger small"></span>
                        </div>
                        <div class="col-md-6">
                            <label asp-for="Ubicacion" class="form-label fw-semibold">Ubicación</label>
                            <input asp-for="Ubicacion" class="form-control form-control-lg" placeholder="Opcional" />
                            <span asp-validation-for="Ubicacion" class="text-danger small"></span>
                        </div>
                    </div>

                    <div class="row g-3 mt-1">
                        <div class="col-md-6">
                            <label asp-for="Estado" class="form-label fw-semibold">Estado</label>
                            <select asp-for="Estado" class="form-select form-select-lg" id="@Html.IdFor(m => m.Estado)">
                                <option value="">Seleccione...</option>
                                <option value="Disponible">Disponible</option>
                                <option value="Ocupada">Ocupada</option>
                                <option value="Reservada">Reservada</option>
                            </select>
                            <span asp-validation-for="Estado" class="text-danger small"></span>
                        </div>
                    </div>

                    <!-- Económicos -->
                    <div class="row g-3 mt-1">
                        <div class="col-md-6">
                            <label asp-for="AreaM2" class="form-label fw-semibold">Área (m²)</label>
                            <div class="input-group input-group-lg">
                                <input asp-for="AreaM2" class="form-control" type="number" step="0.01" min="0" id="@Html.IdFor(m => m.AreaM2)" />
                                <span class="input-group-text">m²</span>
                            </div>
                            <span asp-validation-for="AreaM2" class="text-danger small"></span>
                        </div>

                        <div class="col-md-6">
                            <label asp-for="PrecioAlquilerPorM2" class="form-label fw-semibold">Precio por m²</label>
                            <div class="input-group input-group-lg">
                                <span class="input-group-text">$</span>
                                <input asp-for="PrecioAlquilerPorM2" class="form-control" type="number" step="0.01" min="0" id="@Html.IdFor(m => m.PrecioAlquilerPorM2)" />
                            </div>
                            <span asp-validation-for="PrecioAlquilerPorM2" class="text-danger small"></span>
                        </div>
                    </div>

                    <!-- Solo Precio estimado -->
                    <div class="row g-3 mt-1">
                        <div class="col-md-12">
                            <label class="form-label fw-semibold">Precio estimado</label>
                            <div class="input-group input-group-lg">
                                <span class="input-group-text">$</span>
                                <input id="precioPreview"
                                       class="form-control"
                                       type="text"
                                       value="@(Model != null ? ((Model.AreaM2 ?? 0M) * (Model.PrecioAlquilerPorM2 ?? 0M)).ToString("0.00") : "0.00")"
                                       readonly />
                            </div>
                        </div>
                    </div>

                    <div class="d-flex gap-2 mt-4">
                        <button type="submit" class="btn btn-save btn-lg fw-semibold">
                            <i class="bi bi-check2 me-1"></i> Guardar cambios
                        </button>
                        <a asp-action="Index" class="btn btn-cancel btn-lg">Cancelar</a>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Columna derecha: vista rápida -->
    <div class="col-lg-5">
        <div class="card shadow-sm">
            <div class="card-body p-4">
                <div class="section-title">Vista rápida</div>
                <dl class="dl-grid">
                    <dt>Nombre</dt>
                    <dd id="vrNombre">@Model?.Nombre</dd>

                    <dt>Complejo</dt>
                    <dd id="vrComplejo">@Model?.Complejo</dd>

                    <dt>Ubicación</dt>
                    <dd id="vrUbicacion">@Model?.Ubicacion</dd>

                    <dt>Estado</dt>
                    <dd id="vrEstado">
                        @{
                            var estado = (Model?.Estado ?? string.Empty).Trim();
                        }
                        @if (string.Equals(estado, "Disponible", System.StringComparison.OrdinalIgnoreCase))
                        {
                            <span class="badge-state state-available">Disponible</span>
                        }
                        else if (string.Equals(estado, "Ocupada", System.StringComparison.OrdinalIgnoreCase))
                        {
                            <span class="badge-state state-occupied">Ocupada</span>
                        }
                        else if (string.Equals(estado, "Reservada", System.StringComparison.OrdinalIgnoreCase))
                        {
                            <span class="badge-state state-reserved">Reservada</span>
                        }
                        else
                        {
                            <span class="badge-state" style="background:#eef1f4;color:#4b5563;border-color:#e5e7eb;">—</span>
                        }
                    </dd>

                    <dt>Área (m²)</dt>
                    <dd class="text-mono" id="vrArea">@(Model?.AreaM2.HasValue == true ? Model.AreaM2.Value.ToString("N2") : "0.00")</dd>

                    <dt>Precio/m²</dt>
                    <dd class="text-mono" id="vrPm2">@(Model?.PrecioAlquilerPorM2.HasValue == true ? "$ " + Model.PrecioAlquilerPorM2.Value.ToString("N2") : "$ 0.00")</dd>

                    <dt>Precio estimado</dt>
                    <dd class="text-mono" id="vrEstimado">
                        @((Model != null ? ((Model.AreaM2 ?? 0M) * (Model.PrecioAlquilerPorM2 ?? 0M)).ToString("0.00") : "0.00"))
                    </dd>
                </dl>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        (function () {
            const $area   = document.getElementById('@Html.IdFor(m => m.AreaM2)');
            const $pm2    = document.getElementById('@Html.IdFor(m => m.PrecioAlquilerPorM2)');
            const $estado = document.getElementById('@Html.IdFor(m => m.Estado)');

            const $preview  = document.getElementById('precioPreview');

            // Vista rápida (espejos)
            const $vrNombre    = document.getElementById('vrNombre');
            const $vrComplejo  = document.getElementById('vrComplejo');
            const $vrUbicacion = document.getElementById('vrUbicacion');
            const $vrEstado    = document.getElementById('vrEstado');
            const $vrArea      = document.getElementById('vrArea');
            const $vrPm2       = document.getElementById('vrPm2');
            const $vrEst       = document.getElementById('vrEstimado');

            const $nombre   = document.getElementById('@Html.IdFor(m => m.Nombre)');
            const $complejo = document.getElementById('@Html.IdFor(m => m.Complejo)');
            const $ubic     = document.getElementById('@Html.IdFor(m => m.Ubicacion)');

            function toNumber(v){
                if (typeof v === 'string') v = v.replace(',', '.');
                const n = parseFloat(v);
                return isNaN(n) ? 0 : n;
            }

            function updatePreview(){
                const total = toNumber($area?.value ?? 0) * toNumber($pm2?.value ?? 0);
                if ($preview) $preview.value = total.toFixed(2);
                // espejo en vista rápida
                if ($vrArea) $vrArea.textContent = toNumber($area?.value ?? 0).toFixed(2);
                if ($vrPm2)  $vrPm2.textContent  = "$ " + toNumber($pm2?.value ?? 0).toFixed(2);
                if ($vrEst)  $vrEst.textContent  = total.toFixed(2);
            }

            function mirrorText(src, targetEl, placeholder = "—"){
                if (!targetEl) return;
                targetEl.textContent = (src && src.value && src.value.trim() !== "") ? src.value : placeholder;
            }

            function renderEstado(){
                const val = ($estado && $estado.value ? $estado.value.trim() : "");
                let html = '<span class="badge-state" style="background:#eef1f4;color:#4b5563;border-color:#e5e7eb;">—</span>';
                if (val === "Disponible"){
                    html = '<span class="badge-state state-available">Disponible</span>';
                } else if (val === "Ocupada"){
                    html = '<span class="badge-state state-occupied">Ocupada</span>';
                } else if (val === "Reservada"){
                    html = '<span class="badge-state state-reserved">Reservada</span>';
                }
                if ($vrEstado) $vrEstado.innerHTML = html;
            }

            // eventos
            if ($area)   $area.addEventListener('input', updatePreview);
            if ($pm2)    $pm2.addEventListener('input', updatePreview);
            if ($estado) $estado.addEventListener('change', renderEstado);

            if ($nombre)   $nombre.addEventListener('input', () => mirrorText($nombre,   $vrNombre));
            if ($complejo) $complejo.addEventListener('input', () => mirrorText($complejo,$vrComplejo));
            if ($ubic)     $ubic.addEventListener('input', () => mirrorText($ubic,     $vrUbicacion));

            // init
            updatePreview();
            renderEstado();
            mirrorText($nombre,   $vrNombre);
            mirrorText($complejo, $vrComplejo);
            mirrorText($ubic,     $vrUbicacion);
        })();
    </script>
}
